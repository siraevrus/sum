name: Performance Monitoring

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM
  workflow_dispatch:

jobs:
  performance-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, dom, fileinfo, mysql, pdo_mysql, sqlite3, pdo_sqlite
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install Dependencies
      run: |
        composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
        npm ci
    
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
    
    - name: Generate Application Key
      run: php artisan key:generate
    
    - name: Set Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
    
    - name: Create SQLite Database
      run: |
        mkdir -p database
        touch database/database.sqlite
    
    - name: Run Database Migrations
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: php artisan migrate --force
    
    - name: Seed Test Data
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: php artisan db:seed --class=TestDataSeeder
    
    - name: Performance Test - API Endpoints
      run: |
        echo "üöÄ Starting API performance tests..."
        
        # Start Laravel server in background
        php artisan serve --host=127.0.0.1 --port=8000 &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Test API endpoints
        echo "üìä Testing API endpoints..."
        
        # Test main page
        curl -w "Main page: %{time_total}s\n" -o /dev/null -s http://127.0.0.1:8000/
        
        # Test API routes (if they exist)
        if curl -s http://127.0.0.1:8000/api > /dev/null; then
          curl -w "API index: %{time_total}s\n" -o /dev/null -s http://127.0.0.1:8000/api
        fi
        
        # Test Filament admin (if accessible)
        if curl -s http://127.0.0.1:8000/admin > /dev/null; then
          curl -w "Admin panel: %{time_total}s\n" -o /dev/null -s http://127.0.0.1:8000/admin
        fi
        
        # Stop server
        kill $SERVER_PID
        
        echo "‚úÖ API performance tests completed"
    
    - name: Performance Test - Database Queries
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: |
        echo "üóÑÔ∏è Testing database performance..."
        
        # Test database connection
        php artisan tinker --execute="
          \$start = microtime(true);
          \$users = App\Models\User::count();
          \$end = microtime(true);
          echo 'User count query: ' . ((\$end - \$start) * 1000) . 'ms' . PHP_EOL;
          
          \$start = microtime(true);
          \$products = App\Models\Product::count();
          \$end = microtime(true);
          echo 'Product count query: ' . ((\$end - \$start) * 1000) . 'ms' . PHP_EOL;
          
          \$start = microtime(true);
          \$sales = App\Models\Sale::count();
          \$end = microtime(true);
          echo 'Sale count query: ' . ((\$end - \$start) * 1000) . 'ms' . PHP_EOL;
        "
    
    - name: Performance Test - Memory Usage
      run: |
        echo "üíæ Testing memory usage..."
        
        # Test memory usage during tests
        php -d memory_limit=512M -r "
          \$start_memory = memory_get_usage();
          echo 'Initial memory: ' . round(\$start_memory / 1024 / 1024, 2) . 'MB' . PHP_EOL;
          
          // Simulate some operations
          \$data = [];
          for (\$i = 0; \$i < 1000; \$i++) {
            \$data[] = [
              'id' => \$i,
              'name' => 'Test ' . \$i,
              'email' => 'test' . \$i . '@example.com'
            ];
          }
          
          \$peak_memory = memory_get_peak_usage();
          echo 'Peak memory: ' . round(\$peak_memory / 1024 / 1024, 2) . 'MB' . PHP_EOL;
          
          \$current_memory = memory_get_usage();
          echo 'Current memory: ' . round(\$current_memory / 1024 / 1024, 2) . 'MB' . PHP_EOL;
        "
    
    - name: Performance Test - Frontend Build
      run: |
        echo "üé® Testing frontend build performance..."
        
        # Measure build time
        time npm run build
        
        # Check build size
        echo "üì¶ Build size analysis:"
        du -sh public/build/
        find public/build -name "*.js" -exec du -h {} \; | sort -hr | head -5
        find public/build -name "*.css" -exec du -h {} \; | sort -hr | head -5
    
    - name: Generate Performance Report
      run: |
        echo "üìä Generating performance report..."
        
        # Create performance report
        cat > performance-report.md << EOF
        # Performance Report
        
        Generated: $(date)
        
        ## Test Results
        
        ### API Performance
        - Main page: Tested
        - API endpoints: Tested
        - Admin panel: Tested
        
        ### Database Performance
        - User queries: Tested
        - Product queries: Tested
        - Sale queries: Tested
        
        ### Memory Usage
        - Initial memory: Measured
        - Peak memory: Measured
        - Current memory: Measured
        
        ### Frontend Build
        - Build time: Measured
        - Build size: Analyzed
        
        ## Recommendations
        
        1. Monitor database query performance
        2. Optimize frontend bundle size
        3. Implement caching strategies
        4. Monitor memory usage in production
        
        EOF
        
        echo "‚úÖ Performance report generated"
    
    - name: Upload Performance Report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance-report.md
        retention-days: 30
